@* "NewBook": "New book", *@
@page "/books"
@* @attribute [Authorize(AbpBookStorePermissions.Book.Default)] *@
@using Volo.Abp.Application.Dtos
@using Volo.Abp.BlazoriseUI
@* below namespace where IBookAppService exists *@
@using AbpBookStore.Application.Contracts.Books
@* @using AbpBookStore.Application.Contracts.Books.Dtos *@
@using AbpBookStore.Domain.Shared.Books
@using AbpBookStore.Localization
@using AbpBookStore.Permissions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<AbpBookStoreResource> L
@inject AbpBlazorMessageLocalizerHelper<AbpBookStoreResource> LH
@inherits AbpCrudPageBase<IBookAppService, BookDto, Guid, PagedAndSortedResultRequestDto, CreateBookDto, UpdateBookDto>

<Card>
  <CardHeader>
    <Row Class="justify-content-between">
      <Column ColumnSize="ColumnSize.IsAuto">
        <h2>@L["Books"]</h2>
      </Column>
      <Column ColumnSize="ColumnSize.IsAuto">
        @if (HasCreatePermission)
        {
          <Button Color="Color.Primary" Clicked="OpenCreateModalAsync">@L["NewBook"]</Button>
        }
      </Column>
    </Row>
  </CardHeader>

  <CardBody>
    <DataGrid TItem="BookDto" Data="Entities" ReadData="OnDataGridReadAsync" TotalItems="TotalCount" ShowPager="true"
      PageSize="PageSize">
      <DataGridColumns>
        <DataGridEntityActionsColumn TItem="BookDto" @ref="@EntityActionsColumn">
          <DisplayTemplate>
            <EntityActions TItem="BookDto" EntityActionsColumn="@EntityActionsColumn">
              <EntityAction TItem="BookDto" Text="@L["Edit"]" RequiredPolicy="@UpdatePolicyName"
                Clicked="() => OpenEditModalAsync(context)" />
              <EntityAction TItem="BookDto" Text="@L["Delete"]" RequiredPolicy="@DeletePolicyName"
                Clicked="() => DeleteEntityAsync(context)"
                ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
            </EntityActions>
          </DisplayTemplate>
        </DataGridEntityActionsColumn>
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Name)" Caption="@L["BookName"]"></DataGridColumn>
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Type)" Caption="@L["BookType"]">
          <DisplayTemplate>
            @L[$"Enum:BookType:{(int)context.Type}"]
          </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.PublishDate)" Caption="@L["BookPublishDate"]">
          <DisplayTemplate>
            @context.PublishDate.ToShortDateString()
          </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Price)" Caption="@L["Price"]">
        </DataGridColumn>
        <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.CreationTime)" Caption="@L["CreationTime"]">
          <DisplayTemplate>
            @context.CreationTime.ToLongDateString()
          </DisplayTemplate>
        </DataGridColumn>
      </DataGridColumns>
    </DataGrid>
  </CardBody>
</Card>

<Modal @ref="@CreateModal">
  <ModalBackdrop />
  <ModalContent IsCentered="true" Size="ModalSize.Default">
    <ModalHeader>
      <ModalTitle>@L["NewBook"]</ModalTitle>
      <CloseButton Clicked="CloseCreateModalAsync" />
    </ModalHeader>
    <ModalBody>
      <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
        <Row>
          <Column ColumnSize="ColumnSize.Is12">
            <Validation MessageLocalizer="@LH.Localize">
              <Field>
                <FieldLabel>@L["BookName"]</FieldLabel>
                <TextEdit @bind-text="@NewEntity.Name">
                  <Feedback>
                    <ValidationError />
                  </Feedback>
                </TextEdit>
              </Field>
              <Field>
                <FieldLabel>@L["BookType"]</FieldLabel>
                <Select TValue="BookType" @bind-SelectedValue="@NewEntity.Type">
                  @foreach (int value in Enum.GetValues(typeof(BookType)))
                  {
                    <SelectItem TValue="BookType" Value="@((BookType)value)">
                      @L[$"Enum:BookType:{value}"]
                    </SelectItem>
                  }
                </Select>
              </Field>
              <Field>
                <FieldLabel>@L["BookPublishDate"]</FieldLabel>
                <DateEdit TValue="DateTime" @bind-Date="@NewEntity.PublishDate" />
              </Field>
              <Field>
                <FieldLabel>@L["BookPrice"]</FieldLabel>
                <NumericEdit TValue="float" @bind-Value="@NewEntity.Price" />
              </Field>
            </Validation>

          </Column>
        </Row>
      </Validations>
    </ModalBody>
    <ModalFooter>
      <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
      <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
        Clicked="CreateEntityAsync">@L["Save"]</Button>
    </ModalFooter>
  </ModalContent>
</Modal>

<Modal @ref="@EditModal">
  <ModalBackdrop />
  <ModalContent IsCentered="true" Size="ModalSize.Default">
    <ModalHeader>
      <ModalTitle>@EditingEntity.Name</ModalTitle>
      <CloseButton Clicked="CloseEditModalAsync" />
    </ModalHeader>
    <ModalBody>
      <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
        <Row>
          <Column ColumnSize="ColumnSize.Is12">
            <Validation MessageLocalizer="@LH.Localize">
              <Field>
                <FieldLabel>@L["BookName"]</FieldLabel>
                <TextEdit @bind-text="EditingEntity.Name" >
                  <Feedback>
                    <ValidationError />
                  </Feedback>
                </TextEdit>
              </Field>
              <Field>
                <FieldLabel>@L["BookType"]</FieldLabel>
                <Select TValue="Book" @bind-SelectedValue="@EditingEntity.Type">
                  @foreach (int value in Enum.GetValues(typeof(Book)))
                  {
                    <SelectItem TValue="Book" Value="@((Book)value)">
                        @L[$"Enum:Book:{value}"]
                    </SelectItem>
                  }
                </Select>
              </Field>
              
            </Validation>
          </Column>
        </Row>
      </Validations>
    </ModalBody>
    <ModalFooter>
      <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
      <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
        Clicked="UpdateEntityAsync">@L["Save"]</Button>
    </ModalFooter>
  </ModalContent>
</Modal>


@code
{
  public Books()
  {
    // CreatePolicyName = AbpBookStorePermissions.Book.Create;
    // UpdatePolicyName = AbpBookStorePermissions.Book.Update;
    // DeletePolicyName = AbpBookStorePermissions.Book.Delete;
  }
}